{"version":3,"sources":["modules/effects/effects.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ngrx","effects","tslib","store","rxjs","operators","ng","core","this","DEFAULT_EFFECT_CONFIG","dispatch","useEffectsErrorHandler","getCreateEffectMetadata","instance","Object","getOwnPropertyNames","filter","propertyName","hasOwnProperty","map","__assign","getSourceForInstance","getPrototypeOf","getEffectDecoratorMetadata","compose","getEffectMetadataEntries","hasMetadataEntries","sourceProto","constructor","getSourceMetadata","reduce","sources","source","concat","mergeEffects","sourceInstance","globalErrorHandler","effectsErrorHandler","sourceName","name","observables$","_a","observable$","effectAction$","pipe","ignoreElements","materialize","notification","effect","merge","apply","__spread","defaultEffectsErrorHandler","errorHandler","retryAttemptLeft","catchError","error","handleError","Actions","_super","_this","call","Actions_1","__extends","prototype","lift","operator","observable","__decorate","Injectable","__param","Inject","ScannedActionsSubject","__metadata","Observable","isOnInitEffects","isFunction","functionName","_ROOT_EFFECTS_GUARD","InjectionToken","ROOT_EFFECTS","FEATURE_EFFECTS","EFFECTS_ERROR_HANDLER","EffectSources","addEffects","effectSourceInstance","next","toActions","groupBy","mergeMap","source$","effectsInstance","effect$","exhaustMap","resolveEffectSource","mergedEffects$","isOnRunEffects","ngrxOnRunEffects","output","reportInvalidActions","reporter","kind","action","value","isAction","type","Error","getEffectName","isMethod","String","stringify","JSON","dematerialize","init$","take","ngrxOnInitEffects","ErrorHandler","Function","Subject","isOnIdentifyEffects","ngrxOnIdentifyEffects","EffectsRunner","effectSources","effectsSubscription","start","subscribe","ngOnDestroy","unsubscribe","Store","rootEffectsInit","createAction","EffectsRootModule","runner","rootEffects","storeRootModule","storeFeatureModule","guard","forEach","NgModule","Optional","Array","StoreRootModule","StoreFeatureModule","EffectsFeatureModule","root","effectSourceGroups","group","EffectsModule","forFeature","featureEffects","ngModule","providers","provide","multi","deps","useFactory","createSourceInstances","forRoot","_provideForRootGuard","SkipSelf","useValue","instances","_i","arguments","length","TypeError","Effect","config","target","addEffectMetadataEntry","metadata","push","defineProperty","ROOT_EFFECTS_INIT","act","configOrProject","errorFn","project","concatMap","complete","undefined","defer","subject","input","index","completed","errored","projectedCount","Notification","n","finalize","createEffect","getEffectsMetadata","acc","ofType","allowedTypes","some","typeOrActionCreator","ɵngrx_modules_effects_effects_a","ɵngrx_modules_effects_effects_b","ɵngrx_modules_effects_effects_c","ɵngrx_modules_effects_effects_d","ɵngrx_modules_effects_effects_e","ɵngrx_modules_effects_effects_f"],"mappings":"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","sourcesContent":["/**\n * @license NgRx 9.0.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@ngrx/store'), require('rxjs'), require('rxjs/operators'), require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('@ngrx/effects', ['exports', 'tslib', '@ngrx/store', 'rxjs', 'rxjs/operators', '@angular/core'], factory) :\n    (global = global || self, factory((global.ngrx = global.ngrx || {}, global.ngrx.effects = {}), global.tslib, global.ngrx.store, global.rxjs, global.rxjs.operators, global.ng.core));\n}(this, (function (exports, tslib, store, rxjs, operators, core) { 'use strict';\n\n    var DEFAULT_EFFECT_CONFIG = {\n        dispatch: true,\n        useEffectsErrorHandler: true,\n    };\n    var CREATE_EFFECT_METADATA_KEY = '__@ngrx/effects_create__';\n\n    /**\n     * @description\n     * Creates an effect from an `Observable` and an `EffectConfig`.\n     *\n     * @param source A function which returns an `Observable`.\n     * @param config A `Partial<EffectConfig>` to configure the effect.  By default, `dispatch` is true and `useEffectsErrorHandler` is true.\n     * @returns If `EffectConfig`#`dispatch` is true, returns `Observable<Action>`.  Else, returns `Observable<unknown>`.\n     *\n     * @usageNotes\n     *\n     * ** Mapping to a different action **\n     * ```ts\n     * effectName$ = createEffect(\n     *   () => this.actions$.pipe(\n     *     ofType(FeatureActions.actionOne),\n     *     map(() => FeatureActions.actionTwo())\n     *   )\n     * );\n     * ```\n     *\n     *  ** Non-dispatching effects **\n     * ```ts\n     * effectName$ = createEffect(\n     *   () => this.actions$.pipe(\n     *     ofType(FeatureActions.actionOne),\n     *     tap(() => console.log('Action One Dispatched'))\n     *   ),\n     *   { dispatch: false }\n     *   // FeatureActions.actionOne is not dispatched\n     * );\n     * ```\n     */\n    function createEffect(source, config) {\n        var effect = source();\n        var value = tslib.__assign(tslib.__assign({}, DEFAULT_EFFECT_CONFIG), config);\n        Object.defineProperty(effect, CREATE_EFFECT_METADATA_KEY, {\n            value: value,\n        });\n        return effect;\n    }\n    function getCreateEffectMetadata(instance) {\n        var propertyNames = Object.getOwnPropertyNames(instance);\n        var metadata = propertyNames\n            .filter(function (propertyName) {\n            return instance[propertyName] &&\n                instance[propertyName].hasOwnProperty(CREATE_EFFECT_METADATA_KEY);\n        })\n            .map(function (propertyName) {\n            var metaData = instance[propertyName][CREATE_EFFECT_METADATA_KEY];\n            return tslib.__assign({ propertyName: propertyName }, metaData);\n        });\n        return metadata;\n    }\n\n    function getSourceForInstance(instance) {\n        return Object.getPrototypeOf(instance);\n    }\n\n    var METADATA_KEY = '__@ngrx/effects__';\n    function Effect(config) {\n        if (config === void 0) { config = {}; }\n        return function (target, propertyName) {\n            var metadata = tslib.__assign(tslib.__assign(tslib.__assign({}, DEFAULT_EFFECT_CONFIG), config), { // Overrides any defaults if values are provided\n                propertyName: propertyName });\n            addEffectMetadataEntry(target, metadata);\n        };\n    }\n    function getEffectDecoratorMetadata(instance) {\n        var effectsDecorators = store.compose(getEffectMetadataEntries, getSourceForInstance)(instance);\n        return effectsDecorators;\n    }\n    /**\n     * Type guard to detemine whether METADATA_KEY is already present on the Class\n     * constructor\n     */\n    function hasMetadataEntries(sourceProto) {\n        return sourceProto.constructor.hasOwnProperty(METADATA_KEY);\n    }\n    /** Add Effect Metadata to the Effect Class constructor under specific key */\n    function addEffectMetadataEntry(sourceProto, metadata) {\n        if (hasMetadataEntries(sourceProto)) {\n            sourceProto.constructor[METADATA_KEY].push(metadata);\n        }\n        else {\n            Object.defineProperty(sourceProto.constructor, METADATA_KEY, {\n                value: [metadata],\n            });\n        }\n    }\n    function getEffectMetadataEntries(sourceProto) {\n        return hasMetadataEntries(sourceProto)\n            ? sourceProto.constructor[METADATA_KEY]\n            : [];\n    }\n\n    function getEffectsMetadata(instance) {\n        return getSourceMetadata(instance).reduce(function (acc, _a) {\n            var propertyName = _a.propertyName, dispatch = _a.dispatch, useEffectsErrorHandler = _a.useEffectsErrorHandler;\n            acc[propertyName] = { dispatch: dispatch, useEffectsErrorHandler: useEffectsErrorHandler };\n            return acc;\n        }, {});\n    }\n    function getSourceMetadata(instance) {\n        var effects = [\n            getEffectDecoratorMetadata,\n            getCreateEffectMetadata,\n        ];\n        return effects.reduce(function (sources, source) { return sources.concat(source(instance)); }, []);\n    }\n\n    function mergeEffects(sourceInstance, globalErrorHandler, effectsErrorHandler) {\n        var sourceName = getSourceForInstance(sourceInstance).constructor.name;\n        var observables$ = getSourceMetadata(sourceInstance).map(function (_a) {\n            var propertyName = _a.propertyName, dispatch = _a.dispatch, useEffectsErrorHandler = _a.useEffectsErrorHandler;\n            var observable$ = typeof sourceInstance[propertyName] === 'function'\n                ? sourceInstance[propertyName]()\n                : sourceInstance[propertyName];\n            var effectAction$ = useEffectsErrorHandler\n                ? effectsErrorHandler(observable$, globalErrorHandler)\n                : observable$;\n            if (dispatch === false) {\n                return effectAction$.pipe(operators.ignoreElements());\n            }\n            var materialized$ = effectAction$.pipe(operators.materialize());\n            return materialized$.pipe(operators.map(function (notification) { return ({\n                effect: sourceInstance[propertyName],\n                notification: notification,\n                propertyName: propertyName,\n                sourceName: sourceName,\n                sourceInstance: sourceInstance,\n            }); }));\n        });\n        return rxjs.merge.apply(void 0, tslib.__spread(observables$));\n    }\n\n    var MAX_NUMBER_OF_RETRY_ATTEMPTS = 10;\n    function defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft) {\n        if (retryAttemptLeft === void 0) { retryAttemptLeft = MAX_NUMBER_OF_RETRY_ATTEMPTS; }\n        return observable$.pipe(operators.catchError(function (error) {\n            if (errorHandler)\n                errorHandler.handleError(error);\n            if (retryAttemptLeft <= 1) {\n                return observable$; // last attempt\n            }\n            // Return observable that produces this particular effect\n            return defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft - 1);\n        }));\n    }\n\n    var Actions = /** @class */ (function (_super) {\n        tslib.__extends(Actions, _super);\n        function Actions(source) {\n            var _this = _super.call(this) || this;\n            if (source) {\n                _this.source = source;\n            }\n            return _this;\n        }\n        Actions_1 = Actions;\n        Actions.prototype.lift = function (operator) {\n            var observable = new Actions_1();\n            observable.source = this;\n            observable.operator = operator;\n            return observable;\n        };\n        var Actions_1;\n        Actions = Actions_1 = tslib.__decorate([\n            core.Injectable(),\n            tslib.__param(0, core.Inject(store.ScannedActionsSubject)),\n            tslib.__metadata(\"design:paramtypes\", [rxjs.Observable])\n        ], Actions);\n        return Actions;\n    }(rxjs.Observable));\n    function ofType() {\n        var allowedTypes = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            allowedTypes[_i] = arguments[_i];\n        }\n        return operators.filter(function (action) {\n            return allowedTypes.some(function (typeOrActionCreator) {\n                if (typeof typeOrActionCreator === 'string') {\n                    // Comparing the string to type\n                    return typeOrActionCreator === action.type;\n                }\n                // We are filtering by ActionCreator\n                return typeOrActionCreator.type === action.type;\n            });\n        });\n    }\n\n    function reportInvalidActions(output, reporter) {\n        if (output.notification.kind === 'N') {\n            var action = output.notification.value;\n            var isInvalidAction = !isAction(action);\n            if (isInvalidAction) {\n                reporter.handleError(new Error(\"Effect \" + getEffectName(output) + \" dispatched an invalid action: \" + stringify(action)));\n            }\n        }\n    }\n    function isAction(action) {\n        return (typeof action !== 'function' &&\n            action &&\n            action.type &&\n            typeof action.type === 'string');\n    }\n    function getEffectName(_a) {\n        var propertyName = _a.propertyName, sourceInstance = _a.sourceInstance, sourceName = _a.sourceName;\n        var isMethod = typeof sourceInstance[propertyName] === 'function';\n        return \"\\\"\" + sourceName + \".\" + String(propertyName) + (isMethod ? '()' : '') + \"\\\"\";\n    }\n    function stringify(action) {\n        try {\n            return JSON.stringify(action);\n        }\n        catch (_a) {\n            return action;\n        }\n    }\n\n    var onIdentifyEffectsKey = 'ngrxOnIdentifyEffects';\n    function isOnIdentifyEffects(instance) {\n        return isFunction(instance, onIdentifyEffectsKey);\n    }\n    var onRunEffectsKey = 'ngrxOnRunEffects';\n    function isOnRunEffects(instance) {\n        return isFunction(instance, onRunEffectsKey);\n    }\n    var onInitEffects = 'ngrxOnInitEffects';\n    function isOnInitEffects(instance) {\n        return isFunction(instance, onInitEffects);\n    }\n    function isFunction(instance, functionName) {\n        return (instance &&\n            functionName in instance &&\n            typeof instance[functionName] === 'function');\n    }\n\n    var _ROOT_EFFECTS_GUARD = new core.InjectionToken('@ngrx/effects Internal Root Guard');\n    var IMMEDIATE_EFFECTS = new core.InjectionToken('ngrx/effects: Immediate Effects');\n    var ROOT_EFFECTS = new core.InjectionToken('ngrx/effects: Root Effects');\n    var FEATURE_EFFECTS = new core.InjectionToken('ngrx/effects: Feature Effects');\n    var EFFECTS_ERROR_HANDLER = new core.InjectionToken('ngrx/effects: Effects Error Handler');\n\n    var EffectSources = /** @class */ (function (_super) {\n        tslib.__extends(EffectSources, _super);\n        function EffectSources(errorHandler, effectsErrorHandler) {\n            var _this = _super.call(this) || this;\n            _this.errorHandler = errorHandler;\n            _this.effectsErrorHandler = effectsErrorHandler;\n            return _this;\n        }\n        EffectSources.prototype.addEffects = function (effectSourceInstance) {\n            this.next(effectSourceInstance);\n        };\n        /**\n         * @internal\n         */\n        EffectSources.prototype.toActions = function () {\n            var _this = this;\n            return this.pipe(operators.groupBy(getSourceForInstance), operators.mergeMap(function (source$) {\n                return source$.pipe(operators.groupBy(effectsInstance));\n            }), operators.mergeMap(function (source$) {\n                var effect$ = source$.pipe(operators.exhaustMap(function (sourceInstance) {\n                    return resolveEffectSource(_this.errorHandler, _this.effectsErrorHandler)(sourceInstance);\n                }), operators.map(function (output) {\n                    reportInvalidActions(output, _this.errorHandler);\n                    return output.notification;\n                }), operators.filter(function (notification) {\n                    return notification.kind === 'N';\n                }), operators.dematerialize());\n                // start the stream with an INIT action\n                // do this only for the first Effect instance\n                var init$ = source$.pipe(operators.take(1), operators.filter(isOnInitEffects), operators.map(function (instance) { return instance.ngrxOnInitEffects(); }));\n                return rxjs.merge(effect$, init$);\n            }));\n        };\n        EffectSources = tslib.__decorate([\n            core.Injectable(),\n            tslib.__param(1, core.Inject(EFFECTS_ERROR_HANDLER)),\n            tslib.__metadata(\"design:paramtypes\", [core.ErrorHandler, Function])\n        ], EffectSources);\n        return EffectSources;\n    }(rxjs.Subject));\n    function effectsInstance(sourceInstance) {\n        if (isOnIdentifyEffects(sourceInstance)) {\n            return sourceInstance.ngrxOnIdentifyEffects();\n        }\n        return '';\n    }\n    function resolveEffectSource(errorHandler, effectsErrorHandler) {\n        return function (sourceInstance) {\n            var mergedEffects$ = mergeEffects(sourceInstance, errorHandler, effectsErrorHandler);\n            if (isOnRunEffects(sourceInstance)) {\n                return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n            }\n            return mergedEffects$;\n        };\n    }\n\n    var EffectsRunner = /** @class */ (function () {\n        function EffectsRunner(effectSources, store) {\n            this.effectSources = effectSources;\n            this.store = store;\n            this.effectsSubscription = null;\n        }\n        EffectsRunner.prototype.start = function () {\n            if (!this.effectsSubscription) {\n                this.effectsSubscription = this.effectSources\n                    .toActions()\n                    .subscribe(this.store);\n            }\n        };\n        EffectsRunner.prototype.ngOnDestroy = function () {\n            if (this.effectsSubscription) {\n                this.effectsSubscription.unsubscribe();\n                this.effectsSubscription = null;\n            }\n        };\n        EffectsRunner = tslib.__decorate([\n            core.Injectable(),\n            tslib.__metadata(\"design:paramtypes\", [EffectSources,\n                store.Store])\n        ], EffectsRunner);\n        return EffectsRunner;\n    }());\n\n    var ROOT_EFFECTS_INIT = '@ngrx/effects/init';\n    var rootEffectsInit = store.createAction(ROOT_EFFECTS_INIT);\n    var EffectsRootModule = /** @class */ (function () {\n        function EffectsRootModule(sources, runner, store, rootEffects, storeRootModule, storeFeatureModule, guard) {\n            this.sources = sources;\n            runner.start();\n            rootEffects.forEach(function (effectSourceInstance) {\n                return sources.addEffects(effectSourceInstance);\n            });\n            store.dispatch({ type: ROOT_EFFECTS_INIT });\n        }\n        EffectsRootModule.prototype.addEffects = function (effectSourceInstance) {\n            this.sources.addEffects(effectSourceInstance);\n        };\n        EffectsRootModule = tslib.__decorate([\n            core.NgModule({}),\n            tslib.__param(3, core.Inject(ROOT_EFFECTS)),\n            tslib.__param(4, core.Optional()),\n            tslib.__param(5, core.Optional()),\n            tslib.__param(6, core.Optional()),\n            tslib.__param(6, core.Inject(_ROOT_EFFECTS_GUARD)),\n            tslib.__metadata(\"design:paramtypes\", [EffectSources,\n                EffectsRunner,\n                store.Store, Array, store.StoreRootModule,\n                store.StoreFeatureModule, Object])\n        ], EffectsRootModule);\n        return EffectsRootModule;\n    }());\n\n    var EffectsFeatureModule = /** @class */ (function () {\n        function EffectsFeatureModule(root, effectSourceGroups, storeRootModule, storeFeatureModule) {\n            effectSourceGroups.forEach(function (group) {\n                return group.forEach(function (effectSourceInstance) {\n                    return root.addEffects(effectSourceInstance);\n                });\n            });\n        }\n        EffectsFeatureModule = tslib.__decorate([\n            core.NgModule({}),\n            tslib.__param(1, core.Inject(FEATURE_EFFECTS)),\n            tslib.__param(2, core.Optional()),\n            tslib.__param(3, core.Optional()),\n            tslib.__metadata(\"design:paramtypes\", [EffectsRootModule, Array, store.StoreRootModule,\n                store.StoreFeatureModule])\n        ], EffectsFeatureModule);\n        return EffectsFeatureModule;\n    }());\n\n    var EffectsModule = /** @class */ (function () {\n        function EffectsModule() {\n        }\n        EffectsModule.forFeature = function (featureEffects) {\n            return {\n                ngModule: EffectsFeatureModule,\n                providers: [\n                    featureEffects,\n                    {\n                        provide: FEATURE_EFFECTS,\n                        multi: true,\n                        deps: featureEffects,\n                        useFactory: createSourceInstances,\n                    },\n                ],\n            };\n        };\n        EffectsModule.forRoot = function (rootEffects) {\n            return {\n                ngModule: EffectsRootModule,\n                providers: [\n                    {\n                        provide: _ROOT_EFFECTS_GUARD,\n                        useFactory: _provideForRootGuard,\n                        deps: [[EffectsRunner, new core.Optional(), new core.SkipSelf()]],\n                    },\n                    {\n                        provide: EFFECTS_ERROR_HANDLER,\n                        useValue: defaultEffectsErrorHandler,\n                    },\n                    EffectsRunner,\n                    EffectSources,\n                    Actions,\n                    rootEffects,\n                    {\n                        provide: ROOT_EFFECTS,\n                        deps: rootEffects,\n                        useFactory: createSourceInstances,\n                    },\n                ],\n            };\n        };\n        EffectsModule = tslib.__decorate([\n            core.NgModule({})\n        ], EffectsModule);\n        return EffectsModule;\n    }());\n    function createSourceInstances() {\n        var instances = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            instances[_i] = arguments[_i];\n        }\n        return instances;\n    }\n    function _provideForRootGuard(runner) {\n        if (runner) {\n            throw new TypeError(\"EffectsModule.forRoot() called twice. Feature modules should use EffectsModule.forFeature() instead.\");\n        }\n        return 'guarded';\n    }\n\n    function act(\n    /** Allow to take either config object or project/error functions */\n    configOrProject, errorFn) {\n        var _a = typeof configOrProject === 'function'\n            ? {\n                project: configOrProject,\n                error: errorFn,\n                operator: operators.concatMap,\n                complete: undefined,\n                unsubscribe: undefined,\n            }\n            : tslib.__assign(tslib.__assign({}, configOrProject), { operator: configOrProject.operator || operators.concatMap }), project = _a.project, error = _a.error, complete = _a.complete, operator = _a.operator, unsubscribe = _a.unsubscribe;\n        return function (source) {\n            return rxjs.defer(function () {\n                var subject = new rxjs.Subject();\n                return rxjs.merge(source.pipe(operator(function (input, index) {\n                    return rxjs.defer(function () {\n                        var completed = false;\n                        var errored = false;\n                        var projectedCount = 0;\n                        return project(input, index).pipe(operators.materialize(), operators.map(function (notification) {\n                            switch (notification.kind) {\n                                case 'E':\n                                    errored = true;\n                                    return new rxjs.Notification(\n                                    // TODO: remove any in RxJS 6.5\n                                    'N', error(notification.error, input));\n                                case 'C':\n                                    completed = true;\n                                    return complete\n                                        ? new rxjs.Notification(\n                                        // TODO: remove any in RxJS 6.5\n                                        'N', complete(projectedCount, input))\n                                        : undefined;\n                                default:\n                                    ++projectedCount;\n                                    return notification;\n                            }\n                        }), operators.filter(function (n) { return n != null; }), operators.dematerialize(), operators.finalize(function () {\n                            if (!completed && !errored && unsubscribe) {\n                                subject.next(unsubscribe(projectedCount, input));\n                            }\n                        }));\n                    });\n                })), subject);\n            });\n        };\n    }\n\n    /**\n     * DO NOT EDIT\n     *\n     * This file is automatically generated at build\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.Actions = Actions;\n    exports.EFFECTS_ERROR_HANDLER = EFFECTS_ERROR_HANDLER;\n    exports.Effect = Effect;\n    exports.EffectSources = EffectSources;\n    exports.EffectsFeatureModule = EffectsFeatureModule;\n    exports.EffectsModule = EffectsModule;\n    exports.EffectsRootModule = EffectsRootModule;\n    exports.EffectsRunner = EffectsRunner;\n    exports.ROOT_EFFECTS_INIT = ROOT_EFFECTS_INIT;\n    exports.act = act;\n    exports.createEffect = createEffect;\n    exports.defaultEffectsErrorHandler = defaultEffectsErrorHandler;\n    exports.getEffectsMetadata = getEffectsMetadata;\n    exports.mergeEffects = mergeEffects;\n    exports.ofType = ofType;\n    exports.rootEffectsInit = rootEffectsInit;\n    exports.ɵngrx_modules_effects_effects_a = getSourceMetadata;\n    exports.ɵngrx_modules_effects_effects_b = createSourceInstances;\n    exports.ɵngrx_modules_effects_effects_c = _provideForRootGuard;\n    exports.ɵngrx_modules_effects_effects_d = _ROOT_EFFECTS_GUARD;\n    exports.ɵngrx_modules_effects_effects_e = ROOT_EFFECTS;\n    exports.ɵngrx_modules_effects_effects_f = FEATURE_EFFECTS;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=effects.umd.js.map\n"]}